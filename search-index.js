crystal_doc_search_index_callback({"repository_name":"splay_tree_map","body":"[![SplayTreeMap CI](https://github.com/wyhaines/splay_tree_map.cr/actions/workflows/ci.yml/badge.svg)](https://github.com/wyhaines/splay_tree_map.cr/actions/workflows/ci.yml)\n[![SplayTreeMap Build Docs](https://github.com/wyhaines/splay_tree_map.cr/actions/workflows/build_docs.yml/badge.svg)](https://github.com/wyhaines/splay_tree_map.cr/actions/workflows/build_docs.yml)\n\n[![GitHub release](https://img.shields.io/github/release/wyhaines/splay_tree_map.cr.svg?style=for-the-badge)](https://github.com/wyhaines/splay_tree_map.cr/releases)\n![GitHub commits since latest release (by SemVer)](https://img.shields.io/github/commits-since/wyhaines/splay_tree_map.cr/latest?style=for-the-badge)\n\n# [Splay Tree Map](https://wyhaines.github.io/splay_tree_map.cr/)\n\nA splay tree is a type of [binary search](https://en.wikipedia.org/wiki/Binary_search_tree) tree that self organizes so that the most frequently accessed items tend to be towards theroot of the tree, where they can be accessed more quickly.\n\nThis implementation provides a [hash-like](https://crystal-lang.org/api/latest/Hash.html) interface, and it provides a couple\nfeatures not typically found in Splay Trees -- efficient removal of the items\nthat are generally least frequently accessed, and an extra fast search option.\n\n### Leaf Pruning\n\nBecause splay trees tend to organize themselves with the most frequently\naccessed elements towards the root of the tree, the least frequently accessed\nitems tend to migrate towards the leaves of the tree. This implementation\noffers a method that can be used to prune its leaves, which generally has the\neffect of removing the least frequently accessed items from the tree.\n\nThis is useful if the data structure is being used to implement a cache, as\nit can be used to control the size of the cache while generaly keeping the\nmost useful items in the cache without any other extensive bookkeeping.\n\n### Search without Splaying\n\nA splay operation is generally performed on any access to a splay tree. This is\nthe operation that moves the most important items towards the root. This operation\nhas a cost to it, however, and there are times when it is desireable to search the\nhash without a splay operation occuring for the key that is searched. This results\nin a faster search operation, at the cost of not performing any efficiency improving\nstructural changes to the tree. This should not be the primary search method that\nis used, but it can be useful at the right time.\n\n### Maximum Size\n\nIf `#maxsize` is set to an integer alue, then the splay tree will perform a prune\noperation when the maximum size of the tree is reached. This is useful for implementing\na cache.\n\n## Installation\n\n1. Add the dependency to your `shard.yml`:\n\n   ```yaml\n   dependencies:\n     splay_tree_map:\n       github: wyhaines/splay_tree_map.cr\n   ```\n\n2. Run `shards install`\n\n## Usage\n\nFull documentation can be found at: [https://wyhaines.github.io/splay_tree_map.cr/index.html](https://wyhaines.github.io/splay_tree_map.cr/index.html)\n\n```crystal\nrequire \"splay_tree_map\"\n```\n\nGenerally, the data structure is used like a hash.\n\n```crystal\nstm = SplayTreeMap(String, String).new\nstm.maxsize = 10\n\nstm[\"this\"] = \"that\"\nstm[\"something\"] = \"else\"\nstm[\"junk\"] = \"pile\"\n\nif stm.has_key?(\"this\")\n  puts stm[\"this\"]\nend\n\nstm.delete(\"junk\")\n\nputs stm.obtain(\"something\") # This finds, but doesn't splay.\n\nstm.prune # remove all leaves\n```\n\n## Testing\n\nTo run the specs run `crystal spec`.  To run specs with more debugging output use `LOG_LEVEL=DEBUG crystal spec`.\n\n## TODO\n\nExperiment with other variations of splay operations, such as lazy semi-splay\nto see if performance can be improved. Right now this isn't any better than\njust using a Hash and arbitrarily deleting half of the hash if it grows too big.\n\n## Credits\n\nThis implementation is derived from the incomplete and broken implementation\nin the Crystalline shard found at https://github.com/jtomschroeder/crystalline\n\n## Contributing\n\n1. Fork it (<https://github.com/wyhaines/splay_tree_map/fork>)\n2. Create your feature branch (`git checkout -b my-new-feature`)\n3. Commit your changes (`git commit -am 'Add some feature'`)\n4. Push to the branch (`git push origin my-new-feature`)\n5. Create a new Pull Request\n\n## Contributors\n\n- [Kirk Haines](https://github.com/wyhaines) - creator and maintainer\n\n![GitHub code size in bytes](https://img.shields.io/github/languages/code-size/wyhaines/splay_tree_map.cr?style=for-the-badge)\n![GitHub issues](https://img.shields.io/github/issues/wyhaines/splay_tree_map.cr?style=for-the-badge)\n","program":{"html_id":"splay_tree_map/toplevel","path":"toplevel.html","kind":"module","full_name":"Top Level Namespace","name":"Top Level Namespace","abstract":false,"locations":[],"repository_name":"splay_tree_map","program":true,"enum":false,"alias":false,"const":false,"types":[{"html_id":"splay_tree_map/SplayTreeMap","path":"SplayTreeMap.html","kind":"class","full_name":"SplayTreeMap(K, V)","name":"SplayTreeMap","abstract":false,"superclass":{"html_id":"splay_tree_map/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"splay_tree_map/Comparable","kind":"module","full_name":"Comparable","name":"Comparable"},{"html_id":"splay_tree_map/Iterable","kind":"module","full_name":"Iterable","name":"Iterable"},{"html_id":"splay_tree_map/Enumerable","kind":"module","full_name":"Enumerable","name":"Enumerable"},{"html_id":"splay_tree_map/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"splay_tree_map/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/splay_tree_map.cr","line_number":58,"url":null},{"filename":"src/version.cr","line_number":1,"url":null}],"repository_name":"splay_tree_map","program":false,"enum":false,"alias":false,"const":false,"constants":[{"id":"VERSION","name":"VERSION","value":"\"0.2.2\""}],"included_modules":[{"html_id":"splay_tree_map/Comparable","kind":"module","full_name":"Comparable","name":"Comparable"},{"html_id":"splay_tree_map/Enumerable","kind":"module","full_name":"Enumerable","name":"Enumerable"},{"html_id":"splay_tree_map/Iterable","kind":"module","full_name":"Iterable","name":"Iterable"}],"class_methods":[{"html_id":"zip(ary1:Array(K),ary2:Array(V))-class-method","name":"zip","doc":"Zips two arrays into a `SplayTreeMap`, taking keys from *ary1* and values from *ary2*.\n\n```\nSplayTreeMap.zip([\"key1\", \"key2\", \"key3\"], [\"value1\", \"value2\", \"value3\"])\n# => {\"key1\" => \"value1\", \"key2\" => \"value2\", \"key3\" => \"value3\"}\n```","summary":"<p>Zips two arrays into a <code><a href=\"SplayTreeMap.html\">SplayTreeMap</a></code>, taking keys from <em>ary1</em> and values from <em>ary2</em>.</p>","abstract":false,"args":[{"name":"ary1","external_name":"ary1","restriction":"Array(K)"},{"name":"ary2","external_name":"ary2","restriction":"Array(V)"}],"args_string":"(ary1 : Array(K), ary2 : Array(V))","args_html":"(ary1 : Array(K), ary2 : Array(V))","location":{"filename":"src/splay_tree_map.cr","line_number":1255,"url":null},"def":{"name":"zip","args":[{"name":"ary1","external_name":"ary1","restriction":"Array(K)"},{"name":"ary2","external_name":"ary2","restriction":"Array(V)"}],"visibility":"Public","body":"stm = SplayTreeMap(K, V).new\nary1.each_with_index do |key, i|\n  stm[key] = ary2[i]\nend\nstm\n"}}],"constructors":[{"html_id":"new(seed:Enumerable(Tuple(K,V))|Nil|Iterable(Tuple(K,V))|Nil=nil,block:SplayTreeMap(K,V),K->V|Nil=nil)-class-method","name":"new","doc":"Creates a new empty `SplayTreeMap` with a *block* that is called when a key is\nmissing from the tree.\n\n```\nstm = SplayTreeMap(String, Array(Int32)).new { |t, k| t[k] = [] of Int32 }\nstm[\"a\"] << 1\nstm[\"a\"] << 2\nstm[\"a\"] << 3\nputs stm.inspect # => [1,2,3]\n```","summary":"<p>Creates a new empty <code><a href=\"SplayTreeMap.html\">SplayTreeMap</a></code> with a <em>block</em> that is called when a key is missing from the tree.</p>","abstract":false,"args":[{"name":"seed","default_value":"nil","external_name":"seed","restriction":"Enumerable(::Tuple(K, V)) | ::Nil | Iterable(::Tuple(K, V)) | ::Nil"},{"name":"block","default_value":"nil","external_name":"block","restriction":"(SplayTreeMap(K, V), K -> V) | ::Nil"}],"args_string":"(seed : Enumerable(Tuple(K, V)) | Nil | Iterable(Tuple(K, V)) | Nil = nil, block : SplayTreeMap(K, V), K -> V | Nil = nil)","args_html":"(seed : Enumerable(Tuple(K, V)) | Nil | Iterable(Tuple(K, V)) | Nil = <span class=\"n\">nil</span>, block : <a href=\"SplayTreeMap.html\">SplayTreeMap</a>(K, V), K -> V | Nil = <span class=\"n\">nil</span>)","location":{"filename":"src/splay_tree_map.cr","line_number":90,"url":null},"def":{"name":"new","args":[{"name":"seed","default_value":"nil","external_name":"seed","restriction":"Enumerable(::Tuple(K, V)) | ::Nil | Iterable(::Tuple(K, V)) | ::Nil"},{"name":"block","default_value":"nil","external_name":"block","restriction":"(SplayTreeMap(K, V), K -> V) | ::Nil"}],"visibility":"Public","body":"_ = SplayTreeMap(K, V).allocate\n_.initialize(seed, block)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}},{"html_id":"new(seed:Enumerable(Tuple(K,V))|Nil|Iterable(Tuple(K,V))|Nil=nil,&block:SplayTreeMap(K,V),K->V)-class-method","name":"new","doc":"Creates a new empty `SplayTreeMap` with a *block* that is called when a key is\nmissing from the tree.\n\n```\nstm = SplayTreeMap(String, Array(Int32)).new { |t, k| t[k] = [] of Int32 }\nstm[\"a\"] << 1\nstm[\"a\"] << 2\nstm[\"a\"] << 3\nputs stm.inspect # => [1,2,3]\n```","summary":"<p>Creates a new empty <code><a href=\"SplayTreeMap.html\">SplayTreeMap</a></code> with a <em>block</em> that is called when a key is missing from the tree.</p>","abstract":false,"args":[{"name":"seed","default_value":"nil","external_name":"seed","restriction":"Enumerable(::Tuple(K, V)) | ::Nil | Iterable(::Tuple(K, V)) | ::Nil"}],"args_string":"(seed : Enumerable(Tuple(K, V)) | Nil | Iterable(Tuple(K, V)) | Nil = nil, &block : SplayTreeMap(K, V), K -> V)","args_html":"(seed : Enumerable(Tuple(K, V)) | Nil | Iterable(Tuple(K, V)) | Nil = <span class=\"n\">nil</span>, &block : <a href=\"SplayTreeMap.html\">SplayTreeMap</a>(K, V), K -> V)","location":{"filename":"src/splay_tree_map.cr","line_number":105,"url":null},"def":{"name":"new","args":[{"name":"seed","default_value":"nil","external_name":"seed","restriction":"Enumerable(::Tuple(K, V)) | ::Nil | Iterable(::Tuple(K, V)) | ::Nil"}],"yields":2,"block_arity":2,"block_arg":{"name":"block","external_name":"block","restriction":"(SplayTreeMap(K, V), K -> V)"},"visibility":"Public","body":"new(seed: seed, block: block)"}},{"html_id":"new(seed:Enumerable(Tuple(K,V))|Nil|Iterable(Tuple(K,V))|Nil,default_value:V)-class-method","name":"new","doc":"Creates a new `SplayTreeMap`, populating it with values from the *Enumerable*\nor the *Iterable* seed object, and with a default return value for any missing\nkey.\n\n```\nstm = SplayTreeMap.new({\"this\" => \"that\", \"something\" => \"else\"}, \"Unknown\")\nstm[\"something\"] # => \"else\"\nstm[\"xyzzy\"]     # => \"Unknown\"\n```","summary":"<p>Creates a new <code><a href=\"SplayTreeMap.html\">SplayTreeMap</a></code>, populating it with values from the <em>Enumerable</em> or the <em>Iterable</em> seed object, and with a default return value for any missing key.</p>","abstract":false,"args":[{"name":"seed","external_name":"seed","restriction":"Enumerable(::Tuple(K, V)) | ::Nil | Iterable(::Tuple(K, V)) | ::Nil"},{"name":"default_value","external_name":"default_value","restriction":"V"}],"args_string":"(seed : Enumerable(Tuple(K, V)) | Nil | Iterable(Tuple(K, V)) | Nil, default_value : V)","args_html":"(seed : Enumerable(Tuple(K, V)) | Nil | Iterable(Tuple(K, V)) | Nil, default_value : V)","location":{"filename":"src/splay_tree_map.cr","line_number":128,"url":null},"def":{"name":"new","args":[{"name":"seed","external_name":"seed","restriction":"Enumerable(::Tuple(K, V)) | ::Nil | Iterable(::Tuple(K, V)) | ::Nil"},{"name":"default_value","external_name":"default_value","restriction":"V"}],"visibility":"Public","body":"new(seed: seed) do\n  default_value\nend"}},{"html_id":"new(default_value:V)-class-method","name":"new","doc":"Creates a new empty `SplayTreeMap` with a default return value for any missing key.\n\n```\nstm = SplayTreeMap(String, String).new(\"Unknown\")\nstm[\"xyzzy\"] # => \"Unknown\"\n```","summary":"<p>Creates a new empty <code><a href=\"SplayTreeMap.html\">SplayTreeMap</a></code> with a default return value for any missing key.</p>","abstract":false,"args":[{"name":"default_value","external_name":"default_value","restriction":"V"}],"args_string":"(default_value : V)","args_html":"(default_value : V)","location":{"filename":"src/splay_tree_map.cr","line_number":115,"url":null},"def":{"name":"new","args":[{"name":"default_value","external_name":"default_value","restriction":"V"}],"visibility":"Public","body":"new do\n  default_value\nend"}}],"instance_methods":[{"html_id":"<=>(other:SplayTreeMap(L,W))forallL,W-instance-method","name":"<=>","doc":"Compares two SplayTreeMaps. All contained objects must also be comparable,\nor this method will trigger an exception.","summary":"<p>Compares two SplayTreeMaps.</p>","abstract":false,"args":[{"name":"other","external_name":"other","restriction":"SplayTreeMap(L, W)"}],"args_string":"(other : SplayTreeMap(L, W)) forall L, W","args_html":"(other : <a href=\"SplayTreeMap.html\">SplayTreeMap</a>(L, W)) forall L, W","location":{"filename":"src/splay_tree_map.cr","line_number":166,"url":null},"def":{"name":"<=>","args":[{"name":"other","external_name":"other","restriction":"SplayTreeMap(L, W)"}],"visibility":"Public","body":"cmp = surface_cmp(other)\nif cmp == 0\nelse\n  return cmp\nend\nme_iter = each\nother_iter = other.each\ncmp = 0\n@lock.synchronize do\n  loop do\n    me_entry = me_iter.next?\n    other_entry = other_iter.next?\n    if me_entry.nil? || other_entry.nil?\n      return 0\n    else\n      cmp = (me_entry.as(::Tuple(K, V))) <=> (other_entry.as(::Tuple(L, W)))\n      if cmp == 0\n      else\n        return cmp\n      end\n    end\n  end\nend\n"}},{"html_id":"[](key:K)-instance-method","name":"[]","doc":"Searches for the given *key* in the tree and returns the associated value.\nIf the key is not in the tree, a KeyError will be raised.\n\n```\nstm = SplayTreeMap(String, String).new\nstm[\"foo\"] = \"bar\"\nstm[\"foo\"] # => \"bar\"\n\nstm = SplayTreeMap(String, String).new(\"bar\")\nstm[\"foo\"] # => \"bar\"\n\nstm = SplayTreeMap(String, String).new { \"bar\" }\nstm[\"foo\"] # => \"bar\"\n\nstm = Hash(String, String).new\nstm[\"foo\"] # raises KeyError\n```","summary":"<p>Searches for the given <em>key</em> in the tree and returns the associated value.</p>","abstract":false,"args":[{"name":"key","external_name":"key","restriction":"K"}],"args_string":"(key : K)","args_html":"(key : K)","location":{"filename":"src/splay_tree_map.cr","line_number":218,"url":null},"def":{"name":"[]","args":[{"name":"key","external_name":"key","restriction":"K"}],"visibility":"Public","body":"(get(key)).as(V)"}},{"html_id":"[]=(key,value)-instance-method","name":"[]=","doc":"Create a key/value association.\n\n```\nstm[\"this\"] = \"that\"\n```","summary":"<p>Create a key/value association.</p>","abstract":false,"args":[{"name":"key","external_name":"key","restriction":""},{"name":"value","external_name":"value","restriction":""}],"args_string":"(key, value)","args_html":"(key, value)","location":{"filename":"src/splay_tree_map.cr","line_number":267,"url":null},"def":{"name":"[]=","args":[{"name":"key","external_name":"key","restriction":""},{"name":"value","external_name":"value","restriction":""}],"visibility":"Public","body":"push(key, value)\nvalue\n"}},{"html_id":"[]?(key:K)-instance-method","name":"[]?","doc":"Returns the value for the key given by *key*.\nIf not found, returns `nil`. This ignores the default value set by `Hash.new`.\n\n```\nstm = SplayTreeMap(String, String).new\nstm[\"foo\"]? # => \"bar\"\nstm[\"bar\"]? # => nil\n\nstm = SplayTreeMap(String, String).new(\"bar\")\nstm[\"foo\"]? # => nil\n```","summary":"<p>Returns the value for the key given by <em>key</em>.</p>","abstract":false,"args":[{"name":"key","external_name":"key","restriction":"K"}],"args_string":"(key : K)","args_html":"(key : K)","location":{"filename":"src/splay_tree_map.cr","line_number":233,"url":null},"def":{"name":"[]?","args":[{"name":"key","external_name":"key","restriction":"K"}],"visibility":"Public","body":"get(key: key, raise_exception: false)"}},{"html_id":"clear-instance-method","name":"clear","doc":"Resets the state of the `SplayTreeMap`, clearing all key/value associations.","summary":"<p>Resets the state of the <code><a href=\"SplayTreeMap.html\">SplayTreeMap</a></code>, clearing all key/value associations.</p>","abstract":false,"location":{"filename":"src/splay_tree_map.cr","line_number":321,"url":null},"def":{"name":"clear","visibility":"Public","body":"@lock.synchronize do\n  @was_pruned = false\n  @pcount = 0\n  @root = nil\n  @size = 0\n  @header = Node(K, V).new(nil, nil)\nend"}},{"html_id":"compact-instance-method","name":"compact","doc":"Returns new `SplayTreeMap` that has all of the `nil` values and their\nassociated keys removed.\n\n```\nstm = SplayTreeMap.new({\"hello\" => \"world\", \"foo\" => nil})\nstm.compact # => {\"hello\" => \"world\"}\n```","summary":"<p>Returns new <code><a href=\"SplayTreeMap.html\">SplayTreeMap</a></code> that has all of the <code>nil</code> values and their associated keys removed.</p>","abstract":false,"location":{"filename":"src/splay_tree_map.cr","line_number":338,"url":null},"def":{"name":"compact","visibility":"Public","body":"@lock.synchronize do\n  each_with_object(self.class.new) do |__arg0, memo|\n    key = __arg0[0]\n    value = __arg0[1]\n    if value.nil?\n    else\n      memo[key] = value\n    end\n  end\nend"}},{"html_id":"compact!-instance-method","name":"compact!","doc":"Removes all `nil` values from `self`. Returns `nil` if no changes were made.\n\n```\nstm = SplayTreeMap.new({\"hello\" => \"world\", \"foo\" => nil})\nstm.compact! # => {\"hello\" => \"world\"}\nstm.compact! # => nil\n```","summary":"<p>Removes all <code>nil</code> values from <code>self</code>.</p>","abstract":false,"location":{"filename":"src/splay_tree_map.cr","line_number":353,"url":null},"def":{"name":"compact!","visibility":"Public","body":"reject! do |_key, value|\n  value.nil?\nend"}},{"html_id":"delete(key,&)-instance-method","name":"delete","doc":"Deletes the key-value pair and returns the value, else yields *key* with given block.\n\n```\nstm = SplayTreeMap.new({\"foo\" => \"bar\"})\nstm.delete(\"foo\") { |key| \"#{key} not found\" } # => \"bar\"\nstm.fetch(\"foo\", nil)                          # => nil\nstm.delete(\"baz\") { |key| \"#{key} not found\" } # => \"baz not found\"\n```","summary":"<p>Deletes the key-value pair and returns the value, else yields <em>key</em> with given block.</p>","abstract":false,"args":[{"name":"key","external_name":"key","restriction":""}],"args_string":"(key, &)","args_html":"(key, &)","location":{"filename":"src/splay_tree_map.cr","line_number":365,"url":null},"def":{"name":"delete","args":[{"name":"key","external_name":"key","restriction":""}],"yields":1,"block_arity":1,"visibility":"Public","body":"value = delete_impl(key)\nvalue != Unk ? value : yield key\n"}},{"html_id":"delete(key)-instance-method","name":"delete","doc":"Deletes the key-value pair and returns the value, otherwise returns `nil`.\n\n```\nstm = SplayTreeMap.new({\"foo\" => \"bar\"})\nstm.delete(\"foo\")     # => \"bar\"\nstm.fetch(\"foo\", nil) # => nil\n```","summary":"<p>Deletes the key-value pair and returns the value, otherwise returns <code>nil</code>.</p>","abstract":false,"args":[{"name":"key","external_name":"key","restriction":""}],"args_string":"(key)","args_html":"(key)","location":{"filename":"src/splay_tree_map.cr","line_number":377,"url":null},"def":{"name":"delete","args":[{"name":"key","external_name":"key","restriction":""}],"visibility":"Public","body":"delete(key) do\n  nil\nend"}},{"html_id":"delete_if(&):self-instance-method","name":"delete_if","doc":"DEPRECATED: This is just `reject!` by another name. Use that instead.\nDeletes each key-value pair for which the given block returns `true`.\nReturns the `SplayTreeMap`.\n\n```\nstm = SplayTreeMap.new({\"foo\" => \"bar\", \"fob\" => \"baz\", \"bar\" => \"qux\"})\nstm.delete_if { |key, value| key.starts_with?(\"fo\") }\nstm # => { \"bar\" => \"qux\" }\n```","summary":"<p><span class=\"flag red\">DEPRECATED</span>  This is just <code><a href=\"SplayTreeMap.html#reject%21%28%26%3AK%2CV-%3E_%29-instance-method\">#reject!</a></code> by another name.</p>","abstract":false,"location":{"filename":"src/splay_tree_map.cr","line_number":415,"url":null},"def":{"name":"delete_if","yields":2,"block_arity":2,"return_type":"self","visibility":"Public","body":"reject! do |k, v|\n  yield k, v\nend\nself\n"}},{"html_id":"dig(key:K,*subkeys)-instance-method","name":"dig","doc":"Traverses the depth of a structure and returns the value, otherwise\nraises `KeyError`.\n\n```\nh = {\"a\" => {\"b\" => [10, 20, 30]}}\nstm = SplayTreeMap.new(h)\nstm.dig \"a\", \"b\" # => [10, 20, 30]\nstm.dig \"a\", \"c\" # raises KeyError\n```","summary":"<p>Traverses the depth of a structure and returns the value, otherwise raises <code>KeyError</code>.</p>","abstract":false,"args":[{"name":"key","external_name":"key","restriction":"K"},{"name":"subkeys","external_name":"subkeys","restriction":""}],"args_string":"(key : K, *subkeys)","args_html":"(key : K, *subkeys)","location":{"filename":"src/splay_tree_map.cr","line_number":429,"url":null},"def":{"name":"dig","args":[{"name":"key","external_name":"key","restriction":"K"},{"name":"subkeys","external_name":"subkeys","restriction":""}],"splat_index":1,"visibility":"Public","body":"@lock.synchronize do\n  if (value = self[key]) && (value.responds_to?(:dig))\n    return value.dig(*subkeys)\n  end\nend\nraise(KeyError.new(\"SplayTreeMap value not diggable for key: #{key.inspect}\"))\n"}},{"html_id":"dig?(key:K,*subkeys)-instance-method","name":"dig?","doc":"Traverses the depth of a structure and returns the value.\nReturns `nil` if not found.\n\n```\nh = {\"a\" => {\"b\" => [10, 20, 30]}}\nstm = SplayTreeMap.new(h)\nstm.dig \"a\", \"b\" # => [10, 20, 30]\nstm.dig \"a\", \"c\" # => nil\n```","summary":"<p>Traverses the depth of a structure and returns the value.</p>","abstract":false,"args":[{"name":"key","external_name":"key","restriction":"K"},{"name":"subkeys","external_name":"subkeys","restriction":""}],"args_string":"(key : K, *subkeys)","args_html":"(key : K, *subkeys)","location":{"filename":"src/splay_tree_map.cr","line_number":452,"url":null},"def":{"name":"dig?","args":[{"name":"key","external_name":"key","restriction":"K"},{"name":"subkeys","external_name":"subkeys","restriction":""}],"splat_index":1,"visibility":"Public","body":"@lock.synchronize do\n  if (value = self[key]?) && (value.responds_to?(:\"dig?\"))\n    return value.dig?(*subkeys)\n  end\nend"}},{"html_id":"dup-instance-method","name":"dup","doc":"Duplicates a `SplayTreeMap`.\n\n```\nstm_a = {\"foo\" => \"bar\"}\nstm_b = hash_a.dup\nstm_b.merge!({\"baz\" => \"qux\"})\nstm_a # => {\"foo\" => \"bar\"}\n```","summary":"<p>Duplicates a <code><a href=\"SplayTreeMap.html\">SplayTreeMap</a></code>.</p>","abstract":false,"location":{"filename":"src/splay_tree_map.cr","line_number":473,"url":null},"def":{"name":"dup","visibility":"Public","body":"@lock.synchronize do\n  return SplayTreeMap.new(self)\nend"}},{"html_id":"each(&:Tuple(K,V)->):Nil-instance-method","name":"each","doc":"Calls the given block for each key/value pair, passing the pair into the block.\n\n```\nstm = SplayTreeMap.new({\"foo\" => \"bar\"})\n\nstm.each do |key, value|\n  key   # => \"foo\"\n  value # => \"bar\"\nend\n\nstm.each do |key_and_value|\n  key_and_value # => {\"foo\", \"bar\"}\nend\n```\n\nThe enumeration follows the order the keys were inserted.","summary":"<p>Calls the given block for each key/value pair, passing the pair into the block.</p>","abstract":false,"location":{"filename":"src/splay_tree_map.cr","line_number":495,"url":null},"def":{"name":"each","yields":1,"block_arity":1,"block_arg":{"name":"","external_name":"","restriction":"(::Tuple(K, V) ->)"},"return_type":"Nil","visibility":"Public","body":"@lock.synchronize do\n  iter = EntryIterator(K, V).new(self)\n  while !(  entry = iter.next).is_a?(Iterator::Stop)\n    yield entry\n  end\nend"}},{"html_id":"each:EntryIterator(K,V)-instance-method","name":"each","doc":"Returns an iterator which can be used to access all of the elements in the tree.\n\n```\nstm = SplayTreeMap.new({\"foo\" => \"bar\", \"fob\" => \"baz\", \"qix\" => \"qux\"})\n\nset = [] of Tuple(String, String)\niterator = stm.each\nwhile entry = iterator.next\n  set << entry\nend\n\nset  # => [{\"fob\" => \"baz\"}, {\"foo\" => \"bar\", \"qix\" => \"qux\"}]\n","summary":"<p>Returns an iterator which can be used to access all of the elements in the tree.</p>","abstract":false,"location":{"filename":"src/splay_tree_map.cr","line_number":517,"url":null},"def":{"name":"each","return_type":"EntryIterator(K, V)","visibility":"Public","body":"EntryIterator(K, V).new(self)"}},{"html_id":"each_key(&)-instance-method","name":"each_key","doc":"Calls the given block for each key-value pair and passes in the key.\n\n```\nstm = SplayTreeMap.new({\"foo\" => \"bar\"})\nstm.each_key do |key|\n  key # => \"foo\"\nend\n```\n\nThe enumeration is in tree order, from smallest to largest.","summary":"<p>Calls the given block for each key-value pair and passes in the key.</p>","abstract":false,"location":{"filename":"src/splay_tree_map.cr","line_number":531,"url":null},"def":{"name":"each_key","yields":1,"block_arity":1,"visibility":"Public","body":"each do |key, _value|\n  yield key\nend"}},{"html_id":"each_key-instance-method","name":"each_key","doc":"Returns an iterator over the SplayTreeMap keys.\n\n```\nstm = SplayTreeMap.new({\"foo\" => \"bar\", \"baz\" => \"qux\"})\niterator = stm.each_key\n\nkey = iterator.next\nkey # => \"foo\"\n\nkey = iterator.next\nkey # => \"baz\"\n```\n\nThe enumeration is in tree order, from smallest to largest.","summary":"<p>Returns an iterator over the SplayTreeMap keys.</p>","abstract":false,"location":{"filename":"src/splay_tree_map.cr","line_number":551,"url":null},"def":{"name":"each_key","visibility":"Public","body":"KeyIterator(K, V).new(self)"}},{"html_id":"each_value(&)-instance-method","name":"each_value","doc":"Calls the given block for each key-value pair and passes in the value.\n\n```\nstm = SplayTreeMap.new({\"foo\" => \"bar\"})\nstm.each_value do |value|\n  value # => \"bar\"\nend\n```\n\nThe enumeration is in tree order, from smallest to largest.","summary":"<p>Calls the given block for each key-value pair and passes in the value.</p>","abstract":false,"location":{"filename":"src/splay_tree_map.cr","line_number":565,"url":null},"def":{"name":"each_value","yields":1,"block_arity":1,"visibility":"Public","body":"each do |_key, value|\n  yield value\nend"}},{"html_id":"each_value-instance-method","name":"each_value","doc":"Returns an iterator over the hash values.\nWhich behaves like an `Iterator` consisting of the value's types.\n\n```\nstm = SplayTreeMap.new({\"foo\" => \"bar\", \"baz\" => \"qux\"})\niterator = stm.each_value\n\nvalue = iterator.next\nvalue # => \"bar\"\n\nvalue = iterator.next\nvalue # => \"qux\"\n```\n\nThe enumeration is in tree order, from smallest to largest.","summary":"<p>Returns an iterator over the hash values.</p>","abstract":false,"location":{"filename":"src/splay_tree_map.cr","line_number":586,"url":null},"def":{"name":"each_value","visibility":"Public","body":"ValueIterator(K, V).new(self)"}},{"html_id":"empty?-instance-method","name":"empty?","doc":"Returns true of the tree contains no key/value pairs.\n\n```\nstm = SplayTreeMap(Int32, Int32).new\nstm.empty? # => true\nstm[1] = 1\nstm.empty? # => false\n```\n","summary":"<p>Returns true of the tree contains no key/value pairs.</p>","abstract":false,"location":{"filename":"src/splay_tree_map.cr","line_number":599,"url":null},"def":{"name":"empty?","visibility":"Public","body":"@size == 0"}},{"html_id":"fetch(key,&)-instance-method","name":"fetch","doc":"Returns the value for the key given by *key*, or when not found calls the given block with the key.\nThis ignores the default value set by `SplayTreeMap.new`.\n\n```\nstm = SplayTreeMap.new({\"foo\" => \"bar\"})\nstm.fetch(\"foo\") { \"default value\" }  # => \"bar\"\nstm.fetch(\"bar\") { \"default value\" }  # => \"default value\"\nstm.fetch(\"bar\") { |key| key.upcase } # => \"BAR\"\n```","summary":"<p>Returns the value for the key given by <em>key</em>, or when not found calls the given block with the key.</p>","abstract":false,"args":[{"name":"key","external_name":"key","restriction":""}],"args_string":"(key, &)","args_html":"(key, &)","location":{"filename":"src/splay_tree_map.cr","line_number":612,"url":null},"def":{"name":"fetch","args":[{"name":"key","external_name":"key","restriction":""}],"yields":1,"block_arity":1,"visibility":"Public","body":"value = get_impl(key)\nvalue != Unk ? value : yield key\n"}},{"html_id":"fetch(key,default)-instance-method","name":"fetch","doc":"Returns the value for the key given by *key*, or when not found the value given by *default*.\nThis ignores the default value set by `SplayTreeMap.new`.\n\n```\nstm = SplayTreeMap.new({\"foo\" => \"bar\"})\nstm.fetch(\"foo\", \"foo\") # => \"bar\"\nstm.fetch(\"bar\", \"foo\") # => \"foo\"\n```","summary":"<p>Returns the value for the key given by <em>key</em>, or when not found the value given by <em>default</em>.</p>","abstract":false,"args":[{"name":"key","external_name":"key","restriction":""},{"name":"default","external_name":"default","restriction":""}],"args_string":"(key, default)","args_html":"(key, default)","location":{"filename":"src/splay_tree_map.cr","line_number":625,"url":null},"def":{"name":"fetch","args":[{"name":"key","external_name":"key","restriction":""},{"name":"default","external_name":"default","restriction":""}],"visibility":"Public","body":"fetch(key) do\n  default\nend"}},{"html_id":"has_key?(key):Bool-instance-method","name":"has_key?","doc":"Return a boolean value indicating whether the given key can be found in the tree.\n\n```\nstm = SplayTreeMap.new({\"a\" => 1, \"b\" => 2})\nstm.has_key?(\"a\") # => true\nstm.has_key?(\"c\") # => false\n```\n","summary":"<p>Return a boolean value indicating whether the given key can be found in the tree.</p>","abstract":false,"args":[{"name":"key","external_name":"key","restriction":""}],"args_string":"(key) : Bool","args_html":"(key) : Bool","location":{"filename":"src/splay_tree_map.cr","line_number":667,"url":null},"def":{"name":"has_key?","args":[{"name":"key","external_name":"key","restriction":""}],"return_type":"Bool","visibility":"Public","body":"(get_impl(key)) == Unk ? false : true"}},{"html_id":"has_value?(value):Bool-instance-method","name":"has_value?","doc":"Return a boolean value indicating whether the given value can be found in the tree.\nThis is potentially slow as it requires scanning the tree until a match is found or\nthe end of the tree is reached.\n```\nstm = SplayTreeMap.new({\"a\" => 1, \"b\" => 2})\nstm.has_value?(\"2\") # => true\nstm.has_value?(\"4\") # => false\n```\n","summary":"<p>Return a boolean value indicating whether the given value can be found in the tree.</p>","abstract":false,"args":[{"name":"value","external_name":"value","restriction":""}],"args_string":"(value) : Bool","args_html":"(value) : Bool","location":{"filename":"src/splay_tree_map.cr","line_number":680,"url":null},"def":{"name":"has_value?","args":[{"name":"value","external_name":"value","restriction":""}],"return_type":"Bool","visibility":"Public","body":"self.each do |_k, v|\n  if v == value\n    return true\n  end\nend\nfalse\n"}},{"html_id":"height(key):Int32|Nil-instance-method","name":"height","doc":"Return the height at which a given key can be found.","summary":"<p>Return the height at which a given key can be found.</p>","abstract":false,"args":[{"name":"key","external_name":"key","restriction":""}],"args_string":"(key) : Int32 | Nil","args_html":"(key) : Int32 | Nil","location":{"filename":"src/splay_tree_map.cr","line_number":693,"url":null},"def":{"name":"height","args":[{"name":"key","external_name":"key","restriction":""}],"return_type":"Int32 | ::Nil","visibility":"Public","body":"node = @root\nif node.nil?\n  return nil\nend\nh = 0\nloop do\n  if node\n  else\n    return nil\n  end\n  cmp = key <=> node.key\n  if cmp == -1\n    h = h + 1\n    node = node.left\n  else\n    if cmp == 1\n      h = h + 1\n      node = node.right\n    else\n      return h\n    end\n  end\nend\n"}},{"html_id":"height-instance-method","name":"height","doc":"Return the height of the current tree.","summary":"<p>Return the height of the current tree.</p>","abstract":false,"location":{"filename":"src/splay_tree_map.cr","line_number":688,"url":null},"def":{"name":"height","visibility":"Public","body":"height_recursive(@root)"}},{"html_id":"key_for(value,&)-instance-method","name":"key_for","doc":"Returns a key with the given *value*, else yields *value* with the given block.\n\n```\nstm = SplayTreeMap.new({\"foo\" => \"bar\"})\nstm.key_for(\"bar\") { |value| value.upcase } # => \"foo\"\nstm.key_for(\"qux\") { |value| value.upcase } # => \"QUX\"\n```","summary":"<p>Returns a key with the given <em>value</em>, else yields <em>value</em> with the given block.</p>","abstract":false,"args":[{"name":"value","external_name":"value","restriction":""}],"args_string":"(value, &)","args_html":"(value, &)","location":{"filename":"src/splay_tree_map.cr","line_number":732,"url":null},"def":{"name":"key_for","args":[{"name":"value","external_name":"value","restriction":""}],"yields":1,"block_arity":1,"visibility":"Public","body":"each do |k, v|\n  if v == value\n    return k\n  end\nend\nyield value\n"}},{"html_id":"key_for(value)-instance-method","name":"key_for","doc":"Returns a key with the given *value*, else raises `KeyError`.\n\n```\nstm = SplayTreeMap.new({\"foo\" => \"bar\", \"baz\" => \"qux\"})\nstm.key_for(\"bar\")    # => \"foo\"\nstm.key_for(\"qux\")    # => \"baz\"\nstm.key_for(\"foobar\") # raises KeyError\n```","summary":"<p>Returns a key with the given <em>value</em>, else raises <code>KeyError</code>.</p>","abstract":false,"args":[{"name":"value","external_name":"value","restriction":""}],"args_string":"(value)","args_html":"(value)","location":{"filename":"src/splay_tree_map.cr","line_number":747,"url":null},"def":{"name":"key_for","args":[{"name":"value","external_name":"value","restriction":""}],"visibility":"Public","body":"key_for(value) do\n  raise(KeyError.new(\"Missing key for value: #{value}\"))\nend"}},{"html_id":"key_for?(value)-instance-method","name":"key_for?","doc":"Returns a key with the given *value*, else `nil`.\n\n```\nstm = SplayTreeMap.new({\"foo\" => \"bar\", \"baz\" => \"qux\"})\nstm.key_for?(\"bar\")    # => \"foo\"\nstm.key_for?(\"qux\")    # => \"baz\"\nstm.key_for?(\"foobar\") # => nil\n```","summary":"<p>Returns a key with the given <em>value</em>, else <code>nil</code>.</p>","abstract":false,"args":[{"name":"value","external_name":"value","restriction":""}],"args_string":"(value)","args_html":"(value)","location":{"filename":"src/splay_tree_map.cr","line_number":759,"url":null},"def":{"name":"key_for?","args":[{"name":"value","external_name":"value","restriction":""}],"visibility":"Public","body":"key_for(value) do\n  nil\nend"}},{"html_id":"keys:Array(K)-instance-method","name":"keys","doc":"Returns an array of all keys in the tree.\n\n```\nstm = SplayTreeMap.new({\"foo\" => \"bar\", \"baz\" => \"qux\"})\nstm.keys.should eq [\"baz\", \"foo\"]\n```\n","summary":"<p>Returns an array of all keys in the tree.</p>","abstract":false,"location":{"filename":"src/splay_tree_map.cr","line_number":782,"url":null},"def":{"name":"keys","return_type":"Array(K)","visibility":"Public","body":"@lock.synchronize do\n  a = [] of K\n  each do |k, _v|\n    a << k\n  end\n  a\nend"}},{"html_id":"last-instance-method","name":"last","doc":"Returns the last key/value pair in the tree.","summary":"<p>Returns the last key/value pair in the tree.</p>","abstract":false,"location":{"filename":"src/splay_tree_map.cr","line_number":764,"url":null},"def":{"name":"last","visibility":"Public","body":"if @root\nelse\n  return nil\nend\nn = @root\nwhile n && n.right\n  n = n.right\nend\n{n.try(&.key), n.try(&.value)}\n"}},{"html_id":"max-instance-method","name":"max","doc":"Returns the largest key in the tree.","summary":"<p>Returns the largest key in the tree.</p>","abstract":false,"location":{"filename":"src/splay_tree_map.cr","line_number":791,"url":null},"def":{"name":"max","visibility":"Public","body":"if @root\nelse\n  return nil\nend\nn = @root\nwhile n && n.right\n  n = n.right\nend\nn.try(&.key)\n"}},{"html_id":"maxsize-instance-method","name":"maxsize","doc":"Get the maximum size of the tree. If set to nil, the size in unbounded.","summary":"<p>Get the maximum size of the tree.</p>","abstract":false,"location":{"filename":"src/splay_tree_map.cr","line_number":145,"url":null},"def":{"name":"maxsize","visibility":"Public","body":"@maxsize"}},{"html_id":"maxsize=(value)-instance-method","name":"maxsize=","doc":"Set the maximum size of the tree. If set to nil, the size is unbounded.\nIf the size is set to a value that is less than the current size, an immediate\nprune operation will be performed.","summary":"<p>Set the maximum size of the tree.</p>","abstract":false,"args":[{"name":"value","external_name":"value","restriction":""}],"args_string":"(value)","args_html":"(value)","location":{"filename":"src/splay_tree_map.cr","line_number":152,"url":null},"def":{"name":"maxsize=","args":[{"name":"value","external_name":"value","restriction":""}],"visibility":"Public","body":"@maxsize = value.to_u64\nif mxsz = maxsize\n  while @size > mxsz\n    @lock.synchronize do\n      prune\n    end\n  end\nend\n"}},{"html_id":"merge(other:Enumerable(Tuple(L,W)))forallL,W-instance-method","name":"merge","doc":"Returns a new `SplayTreeMap` with the keys and values of this tree and *other* combined.\nA value in *other* takes precedence over the one in this tree. Key types **must** be\ncomparable or this will cause a missing `no overload matches` exception on compilation.\n\n```\nstm = SplayTreeMap.new({\"foo\" => \"bar\"})\nstm.merge({\"baz\" => \"qux\"}) # => {\"foo\" => \"bar\", \"baz\" => \"qux\"}\nstm                         # => {\"foo\" => \"bar\"}\n```","summary":"<p>Returns a new <code><a href=\"SplayTreeMap.html\">SplayTreeMap</a></code> with the keys and values of this tree and <em>other</em> combined.</p>","abstract":false,"args":[{"name":"other","external_name":"other","restriction":"Enumerable(::Tuple(L, W))"}],"args_string":"(other : Enumerable(Tuple(L, W))) forall L, W","args_html":"(other : Enumerable(Tuple(L, W))) forall L, W","location":{"filename":"src/splay_tree_map.cr","line_number":897,"url":null},"def":{"name":"merge","args":[{"name":"other","external_name":"other","restriction":"Enumerable(::Tuple(L, W))"}],"visibility":"Public","body":"stm = SplayTreeMap(K | L, V | W).new(self)\nstm.merge!(other)\nstm\n"}},{"html_id":"merge(other:Enumerable(Tuple(L,W)),&:K,V,W->V|W)forallL,W-instance-method","name":"merge","abstract":false,"args":[{"name":"other","external_name":"other","restriction":"Enumerable(::Tuple(L, W))"}],"args_string":"(other : Enumerable(Tuple(L, W)), & : K, V, W -> V | W) forall L, W","args_html":"(other : Enumerable(Tuple(L, W)), & : K, V, W -> V | W) forall L, W","location":{"filename":"src/splay_tree_map.cr","line_number":903,"url":null},"def":{"name":"merge","args":[{"name":"other","external_name":"other","restriction":"Enumerable(::Tuple(L, W))"}],"yields":3,"block_arity":3,"block_arg":{"name":"","external_name":"","restriction":"(K, V, W -> V | W)"},"visibility":"Public","body":"stm = SplayTreeMap(K | L, V | W).new(self)\nstm.merge!(other) do |k, v1, v2|\n  yield k, v1, v2\nend\nstm\n"}},{"html_id":"merge(other:Enumerable(A(Tuple(L,W))))forallA,L,W-instance-method","name":"merge","abstract":false,"args":[{"name":"other","external_name":"other","restriction":"Enumerable(A(::Tuple(L, W)))"}],"args_string":"(other : Enumerable(A(Tuple(L, W)))) forall A, L, W","args_html":"(other : Enumerable(A(Tuple(L, W)))) forall A, L, W","location":{"filename":"src/splay_tree_map.cr","line_number":921,"url":null},"def":{"name":"merge","args":[{"name":"other","external_name":"other","restriction":"Enumerable(A(::Tuple(L, W)))"}],"visibility":"Public","body":"stm = SplayTreeMap(K | L, V | W).new(self)\nstm.merge!(other)\nstm\n"}},{"html_id":"merge(other:Enumerable(L))forallL-instance-method","name":"merge","abstract":false,"args":[{"name":"other","external_name":"other","restriction":"Enumerable(L)"}],"args_string":"(other : Enumerable(L)) forall L","args_html":"(other : Enumerable(L)) forall L","location":{"filename":"src/splay_tree_map.cr","line_number":909,"url":null},"def":{"name":"merge","args":[{"name":"other","external_name":"other","restriction":"Enumerable(L)"}],"visibility":"Public","body":"stm = SplayTreeMap(K | L, V | L).new(self)\nstm.merge!(other)\nstm\n"}},{"html_id":"merge(other:Enumerable(Tuple(L)),&:K,V,W->V|W)forallL-instance-method","name":"merge","abstract":false,"args":[{"name":"other","external_name":"other","restriction":"Enumerable(::Tuple(L))"}],"args_string":"(other : Enumerable(Tuple(L)), & : K, V, W -> V | W) forall L","args_html":"(other : Enumerable(Tuple(L)), & : K, V, W -> V | W) forall L","location":{"filename":"src/splay_tree_map.cr","line_number":915,"url":null},"def":{"name":"merge","args":[{"name":"other","external_name":"other","restriction":"Enumerable(::Tuple(L))"}],"yields":3,"block_arity":3,"block_arg":{"name":"","external_name":"","restriction":"(K, V, W -> V | W)"},"visibility":"Public","body":"stm = SplayTreeMap(K | L, V | L).new(self)\nstm.merge!(other) do |k, v1, v2|\n  yield k, v1, v2\nend\nstm\n"}},{"html_id":"merge(other:Enumerable(A(Tuple(L,W))),&:K,V,W->V|W)forallA,L,W-instance-method","name":"merge","abstract":false,"args":[{"name":"other","external_name":"other","restriction":"Enumerable(A(::Tuple(L, W)))"}],"args_string":"(other : Enumerable(A(Tuple(L, W))), & : K, V, W -> V | W) forall A, L, W","args_html":"(other : Enumerable(A(Tuple(L, W))), & : K, V, W -> V | W) forall A, L, W","location":{"filename":"src/splay_tree_map.cr","line_number":927,"url":null},"def":{"name":"merge","args":[{"name":"other","external_name":"other","restriction":"Enumerable(A(::Tuple(L, W)))"}],"yields":3,"block_arity":3,"block_arg":{"name":"","external_name":"","restriction":"(K, V, W -> V | W)"},"visibility":"Public","body":"stm = SplayTreeMap(K | L, V | W).new(self)\nstm.merge!(other) do |k, v1, v2|\n  yield k, v1, v2\nend\nstm\n"}},{"html_id":"merge!(other:T)forallT-instance-method","name":"merge!","doc":"Adds the contents of *other* to this `SplayTreeMap`.\n\nFor Array-like structures, which return a single value to the block passed\nto `#each`, that value will be used for both the key and the value.\n\nFor Array-like structures, where each array element is a two value Tuple,\nthe first value of the Tuple will be the key, and the second will be the\nvalue.\n\nFor Hash-like structures, which pass a key/value tuple into the `#each`,\nthe key and value will be used for the key and value in the tree entry.\n\nIf a Tuple is passed into the `#each` that has more or fewer than 2 elements,\nthe key for the tree entry will come from the first element in the Tuple, and\nthe value will come from the last element in the Tuple.\n\n```\na = [] of Int32\n10.times {|x| a << x}\nstm = SplayTreeMap(Int32, Int32).new({6 => 0, 11 => 0}).merge!(a)\nstm[11] # => 0\nstm[6]  # => 6\n\nh = {} of Int32 => Int32\n10.times {|x| h[x] = x**2}\nstm = SplayTreeMap(Int32, Int32).new.merge!(h)\nstm[6] # => 36\n\nstm = SplayTreeMap(Int32, Int32).new.merge!({ {4,16},{5},{7,49,343} })\nstm[4] # => 16\nstm[5] # => 5\nstm[7] # => 343\n","summary":"<p>Adds the contents of <em>other</em> to this <code><a href=\"SplayTreeMap.html\">SplayTreeMap</a></code>.</p>","abstract":false,"args":[{"name":"other","external_name":"other","restriction":"T"}],"args_string":"(other : T) forall T","args_html":"(other : <a href=\"SplayTreeMap.html\">T</a>) forall T","location":{"filename":"src/splay_tree_map.cr","line_number":835,"url":null},"def":{"name":"merge!","args":[{"name":"other","external_name":"other","restriction":"T"}],"visibility":"Public","body":"self.merge!(other) do |_k, _v1, v2|\n  v2\nend"}},{"html_id":"merge!(other:Enumerable(Tuple(L,W)),&)forallL,W-instance-method","name":"merge!","abstract":false,"args":[{"name":"other","external_name":"other","restriction":"Enumerable(::Tuple(L, W))"}],"args_string":"(other : Enumerable(Tuple(L, W)), &) forall L, W","args_html":"(other : Enumerable(Tuple(L, W)), &) forall L, W","location":{"filename":"src/splay_tree_map.cr","line_number":845,"url":null},"def":{"name":"merge!","args":[{"name":"other","external_name":"other","restriction":"Enumerable(::Tuple(L, W))"}],"yields":3,"block_arity":3,"visibility":"Public","body":"other.each do |k, v|\n  if self.has_key?(k)\n    self[k] = yield(k, self[k], v)\n  else\n    self[k] = v\n  end\nend\nself\n"}},{"html_id":"merge!(other:Enumerable(Tuple),&)-instance-method","name":"merge!","abstract":false,"args":[{"name":"other","external_name":"other","restriction":"Enumerable(Tuple)"}],"args_string":"(other : Enumerable(Tuple), &)","args_html":"(other : Enumerable(Tuple), &)","location":{"filename":"src/splay_tree_map.cr","line_number":869,"url":null},"def":{"name":"merge!","args":[{"name":"other","external_name":"other","restriction":"Enumerable(Tuple)"}],"yields":3,"block_arity":3,"visibility":"Public","body":"other.each do |*args|\n  if args[0].size == 1\n    k = v = args[0][0]\n  else\n    k = args[0][0]\n    v = args[0][-1]\n  end\n  if self.has_key?(k)\n    self[k] = yield(k, self[k], v)\n  else\n    self[k] = v\n  end\nend\nself\n"}},{"html_id":"merge!(other:Enumerable(L),&)forallL-instance-method","name":"merge!","abstract":false,"args":[{"name":"other","external_name":"other","restriction":"Enumerable(L)"}],"args_string":"(other : Enumerable(L), &) forall L","args_html":"(other : Enumerable(L), &) forall L","location":{"filename":"src/splay_tree_map.cr","line_number":857,"url":null},"def":{"name":"merge!","args":[{"name":"other","external_name":"other","restriction":"Enumerable(L)"}],"yields":3,"block_arity":3,"visibility":"Public","body":"other.each do |k|\n  if self.has_key?(k)\n    self[k] = yield(k, self[k], k)\n  else\n    self[k] = k\n  end\nend\nself\n"}},{"html_id":"min-instance-method","name":"min","doc":"Returns the smallest key in the tree.","summary":"<p>Returns the smallest key in the tree.</p>","abstract":false,"location":{"filename":"src/splay_tree_map.cr","line_number":934,"url":null},"def":{"name":"min","visibility":"Public","body":"if @root\nelse\n  return nil\nend\nn = @root\nwhile n && n.left\n  n = n.left\nend\nn.try(&.key)\n"}},{"html_id":"obtain(key:K):V-instance-method","name":"obtain","doc":"Obtain a key without splaying. This is much faster than using `#[]` but the\nlack of a splay operation means that the accessed value will not move closer\nto the root of the tree, which bypasses the normal optimization behavior of\nSplay Trees.\n\nA KeyError will be raised if the key can not be found in the tree.","summary":"<p>Obtain a key without splaying.</p>","abstract":false,"args":[{"name":"key","external_name":"key","restriction":"K"}],"args_string":"(key : K) : V","args_html":"(key : K) : V","location":{"filename":"src/splay_tree_map.cr","line_number":635,"url":null},"def":{"name":"obtain","args":[{"name":"key","external_name":"key","restriction":"K"}],"return_type":"V","visibility":"Public","body":"v = obtain_impl(key)\nv == Unk ? raise(KeyError.new(\"Missing hash key: #{key.inspect}\")) : v.as(V)\n"}},{"html_id":"on_prune(&block:K,V->)-instance-method","name":"on_prune","doc":"This method takes a block that accepts key/value pairs from the tree. It will be\ncalled once for every key/value pair that is pruned from the tree. This could be\nused to log items that are eliminate from a cache, or to move eliminated items\ninto a secondard cache, for example.","summary":"<p>This method takes a block that accepts key/value pairs from the tree.</p>","abstract":false,"location":{"filename":"src/splay_tree_map.cr","line_number":136,"url":null},"def":{"name":"on_prune","yields":2,"block_arity":2,"block_arg":{"name":"block","external_name":"block","restriction":"(K, V ->)"},"visibility":"Public","body":"@on_prune = block"}},{"html_id":"prune-instance-method","name":"prune","doc":"This will remove all of the leaves at the end of the tree branches.\nThat is, every node that does not have any children. This will tend\nto remove the least used elements from the tree.\nThis function is expensive, as implemented, as it must walk every\nnode in the tree.\nTODO: Come up with a more efficient way of getting this same effect.","summary":"<p>This will remove all of the leaves at the end of the tree branches.</p>","abstract":false,"location":{"filename":"src/splay_tree_map.cr","line_number":951,"url":null},"def":{"name":"prune","visibility":"Public","body":"@was_pruned = false\nif @root.nil?\n  return\nend\n@was_pruned = true\n@pcount = 0\nheight_limit = height / 2\n@lock.synchronize do\n  descend_from(@root.not_nil!, height_limit)\n  splay(@root.not_nil!.key)\nend\n"}},{"html_id":"put(key:K,value:V,&)-instance-method","name":"put","doc":"Sets the value of *key* to the given *value*.\n\nIf a value already exists for `key`, that (old) value is returned.\nOtherwise the given block is invoked with *key* and its value is returned.\n\n```\nstm = SplayTreeMap(Int32, String).new\nstm.put(1, \"one\") { \"didn't exist\" } # => \"didn't exist\"\nstm.put(1, \"uno\") { \"didn't exist\" } # => \"one\"\nstm.put(2, \"two\") { |key| key.to_s } # => \"2\"\n```","summary":"<p>Sets the value of <em>key</em> to the given <em>value</em>.</p>","abstract":false,"args":[{"name":"key","external_name":"key","restriction":"K"},{"name":"value","external_name":"value","restriction":"V"}],"args_string":"(key : K, value : V, &)","args_html":"(key : K, value : V, &)","location":{"filename":"src/splay_tree_map.cr","line_number":979,"url":null},"def":{"name":"put","args":[{"name":"key","external_name":"key","restriction":"K"},{"name":"value","external_name":"value","restriction":"V"}],"yields":1,"block_arity":1,"visibility":"Public","body":"old_value = push(key, value)\nold_value || (yield key)\n"}},{"html_id":"reject(&:K,V->_)-instance-method","name":"reject","doc":"Returns a new `SplayTreeMap` consisting of entries for which the block returns `false`.\n```\nstm = SplayTreeMap.new({\"a\" => 100, \"b\" => 200, \"c\" => 300})\nstm.reject { |k, v| k > \"a\" } # => {\"a\" => 100}\nstm.reject { |k, v| v < 200 } # => {\"b\" => 200, \"c\" => 300}\n```","summary":"<p>Returns a new <code><a href=\"SplayTreeMap.html\">SplayTreeMap</a></code> consisting of entries for which the block returns <code>false</code>.</p>","abstract":false,"location":{"filename":"src/splay_tree_map.cr","line_number":990,"url":null},"def":{"name":"reject","yields":2,"block_arity":2,"block_arg":{"name":"","external_name":"","restriction":"(K, V -> _)"},"visibility":"Public","body":"@lock.synchronize do\n  each_with_object(SplayTreeMap(K, V).new) do |__arg6, memo|\n    k = __arg6[0]\n    v = __arg6[1]\n    if yield k, v\n    else\n      memo[k] = v\n    end\n  end\nend"}},{"html_id":"reject(keys:Array|Tuple)-instance-method","name":"reject","doc":"Removes a list of keys out of the tree, returning a new tree.\n\n```\nh = {\"a\" => 1, \"b\" => 2, \"c\" => 3, \"d\" => 4}.reject(\"a\", \"c\")\nh # => {\"b\" => 2, \"d\" => 4}\n```","summary":"<p>Removes a list of keys out of the tree, returning a new tree.</p>","abstract":false,"args":[{"name":"keys","external_name":"keys","restriction":"Array | Tuple"}],"args_string":"(keys : Array | Tuple)","args_html":"(keys : Array | Tuple)","location":{"filename":"src/splay_tree_map.cr","line_number":1004,"url":null},"def":{"name":"reject","args":[{"name":"keys","external_name":"keys","restriction":"Array | Tuple"}],"visibility":"Public","body":"@lock.synchronize do\n  stm = dup\n  keys.each do |k|\n    stm.delete(k)\n  end\n  return stm\nend"}},{"html_id":"reject(*keys)-instance-method","name":"reject","doc":"Returns a new `SplayTreeMap` with the given keys removed.\n\n```\n{\"a\" => 1, \"b\" => 2, \"c\" => 3, \"d\" => 4}.reject(\"a\", \"c\") # => {\"b\" => 2, \"d\" => 4}\n```","summary":"<p>Returns a new <code><a href=\"SplayTreeMap.html\">SplayTreeMap</a></code> with the given keys removed.</p>","abstract":false,"args":[{"name":"keys","external_name":"keys","restriction":""}],"args_string":"(*keys)","args_html":"(*keys)","location":{"filename":"src/splay_tree_map.cr","line_number":1017,"url":null},"def":{"name":"reject","args":[{"name":"keys","external_name":"keys","restriction":""}],"splat_index":0,"visibility":"Public","body":"reject(keys)"}},{"html_id":"reject!(&:K,V->_)-instance-method","name":"reject!","doc":"Equivalent to `SplayTreeMap#reject`, but modifies the current object rather than\nreturning a new one. Returns `nil` if no changes were made.","summary":"<p>Equivalent to <code><a href=\"SplayTreeMap.html#reject%28%26%3AK%2CV-%3E_%29-instance-method\">SplayTreeMap#reject</a></code>, but modifies the current object rather than returning a new one.</p>","abstract":false,"location":{"filename":"src/splay_tree_map.cr","line_number":1023,"url":null},"def":{"name":"reject!","yields":2,"block_arity":2,"block_arg":{"name":"","external_name":"","restriction":"(K, V -> _)"},"visibility":"Public","body":"@lock.synchronize do\n  num_entries = size\n  keys_to_delete = [] of K\n  each do |key, value|\n    if yield(key, value)\n      keys_to_delete << key\n    end\n  end\n  keys_to_delete.each do |key|\n    delete(key)\n  end\n  num_entries == size ? nil : self\nend"}},{"html_id":"reject!(keys:Array|Tuple)-instance-method","name":"reject!","doc":"Removes a list of keys out of the tree.\n\n```\nh = {\"a\" => 1, \"b\" => 2, \"c\" => 3, \"d\" => 4}.reject!(\"a\", \"c\")\nh # => {\"b\" => 2, \"d\" => 4}\n```","summary":"<p>Removes a list of keys out of the tree.</p>","abstract":false,"args":[{"name":"keys","external_name":"keys","restriction":"Array | Tuple"}],"args_string":"(keys : Array | Tuple)","args_html":"(keys : Array | Tuple)","location":{"filename":"src/splay_tree_map.cr","line_number":1043,"url":null},"def":{"name":"reject!","args":[{"name":"keys","external_name":"keys","restriction":"Array | Tuple"}],"visibility":"Public","body":"@lock.synchronize do\n  keys.each do |k|\n    delete(k)\n  end\nend\nself\n"}},{"html_id":"reject!(*keys)-instance-method","name":"reject!","doc":"Removes the given keys from the tree.\n\n```\n{\"a\" => 1, \"b\" => 2, \"c\" => 3, \"d\" => 4}.reject!(\"a\", \"c\") # => {\"b\" => 2, \"d\" => 4}\n```","summary":"<p>Removes the given keys from the tree.</p>","abstract":false,"args":[{"name":"keys","external_name":"keys","restriction":""}],"args_string":"(*keys)","args_html":"(*keys)","location":{"filename":"src/splay_tree_map.cr","line_number":1055,"url":null},"def":{"name":"reject!","args":[{"name":"keys","external_name":"keys","restriction":""}],"splat_index":0,"visibility":"Public","body":"reject!(keys)"}},{"html_id":"root-instance-method","name":"root","abstract":false,"location":{"filename":"src/splay_tree_map.cr","line_number":142,"url":null},"def":{"name":"root","visibility":"Public","body":"@root"}},{"html_id":"select(&:K,V->_)-instance-method","name":"select","doc":"Returns a new hash consisting of entries for which the block returns `true`.\n```\nh = {\"a\" => 100, \"b\" => 200, \"c\" => 300}\nh.select { |k, v| k > \"a\" } # => {\"b\" => 200, \"c\" => 300}\nh.select { |k, v| v < 200 } # => {\"a\" => 100}\n```","summary":"<p>Returns a new hash consisting of entries for which the block returns <code>true</code>.</p>","abstract":false,"location":{"filename":"src/splay_tree_map.cr","line_number":1065,"url":null},"def":{"name":"select","yields":2,"block_arity":2,"block_arg":{"name":"","external_name":"","restriction":"(K, V -> _)"},"visibility":"Public","body":"reject do |k, v|\n  !(yield(k, v))\nend"}},{"html_id":"select(keys:Array|Tuple)-instance-method","name":"select","doc":"Returns a new `SplayTreeMap` with the given keys.\n\n```\nSplayTreeMap.new({\"a\" => 1, \"b\" => 2, \"c\" => 3, \"d\" => 4}).select({\"a\", \"c\"}) # => {\"a\" => 1, \"c\" => 3}\nSplayTreeMap.new({\"a\" => 1, \"b\" => 2, \"c\" => 3, \"d\" => 4}).select(\"a\", \"c\")   # => {\"a\" => 1, \"c\" => 3}\nSplayTreeMap.new({\"a\" => 1, \"b\" => 2, \"c\" => 3, \"d\" => 4}).select([\"a\", \"c\"]) # => {\"a\" => 1, \"c\" => 3}\n```","summary":"<p>Returns a new <code><a href=\"SplayTreeMap.html\">SplayTreeMap</a></code> with the given keys.</p>","abstract":false,"args":[{"name":"keys","external_name":"keys","restriction":"Array | Tuple"}],"args_string":"(keys : Array | Tuple)","args_html":"(keys : Array | Tuple)","location":{"filename":"src/splay_tree_map.cr","line_number":1076,"url":null},"def":{"name":"select","args":[{"name":"keys","external_name":"keys","restriction":"Array | Tuple"}],"visibility":"Public","body":"stm = SplayTreeMap(K, V).new\n@lock.synchronize do\n  keys.each do |k|\n    k = k.as(K)\n    if has_key?(k)\n      stm[k] = obtain(k)\n    end\n  end\nend\nstm\n"}},{"html_id":"select(*keys)-instance-method","name":"select","doc":"Returns a new `SplayTreeMap` with the given keys.\n\n```\nSplayTreeMap.new({\"a\" => 1, \"b\" => 2, \"c\" => 3, \"d\" => 4}).select({\"a\", \"c\"}) # => {\"a\" => 1, \"c\" => 3}\nSplayTreeMap.new({\"a\" => 1, \"b\" => 2, \"c\" => 3, \"d\" => 4}).select(\"a\", \"c\")   # => {\"a\" => 1, \"c\" => 3}\nSplayTreeMap.new({\"a\" => 1, \"b\" => 2, \"c\" => 3, \"d\" => 4}).select([\"a\", \"c\"]) # => {\"a\" => 1, \"c\" => 3}\n```","summary":"<p>Returns a new <code><a href=\"SplayTreeMap.html\">SplayTreeMap</a></code> with the given keys.</p>","abstract":false,"args":[{"name":"keys","external_name":"keys","restriction":""}],"args_string":"(*keys)","args_html":"(*keys)","location":{"filename":"src/splay_tree_map.cr","line_number":1085,"url":null},"def":{"name":"select","args":[{"name":"keys","external_name":"keys","restriction":""}],"splat_index":0,"visibility":"Public","body":"self.select(keys)"}},{"html_id":"select!(&:K,V->_)-instance-method","name":"select!","doc":"Equivalent to `Hash#select` but makes modification on the current object rather that returning a new one. Returns `nil` if no changes were made","summary":"<p>Equivalent to <code>Hash#select</code> but makes modification on the current object rather that returning a new one.</p>","abstract":false,"location":{"filename":"src/splay_tree_map.cr","line_number":1090,"url":null},"def":{"name":"select!","yields":2,"block_arity":2,"block_arg":{"name":"","external_name":"","restriction":"(K, V -> _)"},"visibility":"Public","body":"reject! do |k, v|\n  !(yield(k, v))\nend"}},{"html_id":"select!(keys:Array|Tuple)-instance-method","name":"select!","doc":"Removes every element except the given ones.\n\n```\nh1 = {\"a\" => 1, \"b\" => 2, \"c\" => 3, \"d\" => 4}.select!({\"a\", \"c\"})\nh2 = {\"a\" => 1, \"b\" => 2, \"c\" => 3, \"d\" => 4}.select!(\"a\", \"c\")\nh3 = {\"a\" => 1, \"b\" => 2, \"c\" => 3, \"d\" => 4}.select!([\"a\", \"c\"])\nh1 == h2 == h3 # => true\nh1             # => {\"a\" => 1, \"c\" => 3}\n```","summary":"<p>Removes every element except the given ones.</p>","abstract":false,"args":[{"name":"keys","external_name":"keys","restriction":"Array | Tuple"}],"args_string":"(keys : Array | Tuple)","args_html":"(keys : Array | Tuple)","location":{"filename":"src/splay_tree_map.cr","line_number":1103,"url":null},"def":{"name":"select!","args":[{"name":"keys","external_name":"keys","restriction":"Array | Tuple"}],"visibility":"Public","body":"each do |k, _v|\n  if keys.includes?(k)\n  else\n    delete(k)\n  end\nend\nself\n"}},{"html_id":"select!(*keys)-instance-method","name":"select!","doc":"Removes every element except the given ones.\n\n```\nh1 = {\"a\" => 1, \"b\" => 2, \"c\" => 3, \"d\" => 4}.select!({\"a\", \"c\"})\nh2 = {\"a\" => 1, \"b\" => 2, \"c\" => 3, \"d\" => 4}.select!(\"a\", \"c\")\nh3 = {\"a\" => 1, \"b\" => 2, \"c\" => 3, \"d\" => 4}.select!([\"a\", \"c\"])\nh1 == h2 == h3 # => true\nh1             # => {\"a\" => 1, \"c\" => 3}\n```","summary":"<p>Removes every element except the given ones.</p>","abstract":false,"args":[{"name":"keys","external_name":"keys","restriction":""}],"args_string":"(*keys)","args_html":"(*keys)","location":{"filename":"src/splay_tree_map.cr","line_number":1109,"url":null},"def":{"name":"select!","args":[{"name":"keys","external_name":"keys","restriction":""}],"splat_index":0,"visibility":"Public","body":"select!(keys)"}},{"html_id":"size-instance-method","name":"size","doc":"Return the current number of key/value pairs in the tree.","summary":"<p>Return the current number of key/value pairs in the tree.</p>","abstract":false,"location":{"filename":"src/splay_tree_map.cr","line_number":141,"url":null},"def":{"name":"size","visibility":"Public","body":"@size"}},{"html_id":"to_a-instance-method","name":"to_a","doc":"Transform the `SplayTreeMap` into an `Array(Tuple(K, V))`.\n\n```\nstm = SplayTreeMap.new({\"foo\" => \"bar\", \"baz\" => \"qux\"})\nary = stm.to_a # => [{\"baz\", \"qux\"}, {\"foo\", \"bar\"}]\nstm2 = SplayTreeMap.new(ary)\nstm == stm2 # => true\n```","summary":"<p>Transform the <code><a href=\"SplayTreeMap.html\">SplayTreeMap</a></code> into an <code>Array(Tuple(K, V))</code>.</p>","abstract":false,"location":{"filename":"src/splay_tree_map.cr","line_number":1121,"url":null},"def":{"name":"to_a","visibility":"Public","body":"a = Array(::Tuple(K, V)).new\neach do |k, v|\n  a << {k, v}\nend\na\n"}},{"html_id":"to_h-instance-method","name":"to_h","doc":"Transform a `SplayTreeMap(K,V)` into a `Hash(K,V)`.\n\n```\nstm = SplayTreeMap.new({\"foo\" => \"bar\", \"baz\" => \"qux\"})\nh = stm.to_h # => {\"baz\" => \"qux\", \"foo\" => \"bar\"}\n```","summary":"<p>Transform a <code><a href=\"SplayTreeMap.html\">SplayTreeMap</a>(K,V)</code> into a <code>Hash(K,V)</code>.</p>","abstract":false,"location":{"filename":"src/splay_tree_map.cr","line_number":1133,"url":null},"def":{"name":"to_h","visibility":"Public","body":"h = Hash(K, V).new\neach do |k, v|\n  h[k] = v\nend\nh\n"}},{"html_id":"to_s(io:IO):Nil-instance-method","name":"to_s","doc":"Transform the `SplayTreeMap` into a `String` representation.","summary":"<p>Transform the <code><a href=\"SplayTreeMap.html\">SplayTreeMap</a></code> into a <code>String</code> representation.</p>","abstract":false,"args":[{"name":"io","external_name":"io","restriction":"IO"}],"args_string":"(io : IO) : Nil","args_html":"(io : IO) : Nil","location":{"filename":"src/splay_tree_map.cr","line_number":1140,"url":null},"def":{"name":"to_s","args":[{"name":"io","external_name":"io","restriction":"IO"}],"return_type":"Nil","visibility":"Public","body":"final = self.size\ncount = 0\nio << String.build do |buff|\n  buff << \"{ \"\n  self.each do |k, v|\n    count = count + 1\n    buff << k.inspect\n    buff << \" => \"\n    buff << v.inspect\n    if count < final\n      buff << \", \"\n    end\n  end\n  buff << \" }\"\nend\n"}},{"html_id":"transform(&:Tuple(K,V)->Tuple(K2,V2))forallK2,V2-instance-method","name":"transform","doc":"Returns a new `SplayTreeMap` with all of the key/value pairs converted using\nthe provided block. The block can change the types of both keys and values.\n\n```\nstm = SplayTreeMap({1 => 1, 2 => 4, 3 => 9, 4 => 16})\nstm = stm.transform {|k, v| {k.to_s, v.to_s}}\nstm  # => {\"1\" => \"1\", \"2\" => \"4\", \"3\" => \"9\", \"4\" => \"16\"}\n```\n","summary":"<p>Returns a new <code><a href=\"SplayTreeMap.html\">SplayTreeMap</a></code> with all of the key/value pairs converted using the provided block.</p>","abstract":false,"location":{"filename":"src/splay_tree_map.cr","line_number":1165,"url":null},"def":{"name":"transform","yields":1,"block_arity":1,"block_arg":{"name":"","external_name":"","restriction":"(::Tuple(K, V) -> ::Tuple(K2, V2))"},"visibility":"Public","body":"each_with_object(SplayTreeMap(K2, V2).new) do |__arg7, memo|\n  key = __arg7[0]\n  value = __arg7[1]\n  key2, value2 = yield({key, value})\n  memo[key2] = value2\nend"}},{"html_id":"transform_keys(&:K->K2)forallK2-instance-method","name":"transform_keys","doc":"Returns a new `SplayTreeMap` with all keys converted using the block operation.\nThe block can change a type of keys.\n\n```\nstm = SplayTreeMap.new({:a => 1, :b => 2, :c => 3})\nstm.transform_keys { |key| key.to_s } # => {\"a\" => 1, \"b\" => 2, \"c\" => 3}\n```","summary":"<p>Returns a new <code><a href=\"SplayTreeMap.html\">SplayTreeMap</a></code> with all keys converted using the block operation.</p>","abstract":false,"location":{"filename":"src/splay_tree_map.cr","line_number":1179,"url":null},"def":{"name":"transform_keys","yields":1,"block_arity":1,"block_arg":{"name":"","external_name":"","restriction":"(K -> K2)"},"visibility":"Public","body":"each_with_object(SplayTreeMap(K2, V).new) do |__arg8, memo|\n  key = __arg8[0]\n  value = __arg8[1]\n  memo[yield(key)] = value\nend"}},{"html_id":"transform_values(&:V->V2)forallV2-instance-method","name":"transform_values","doc":"Returns a new SplayTreeMap with all values converted using the block operation.\nThe block can change a type of values.\n\n```\nstm = SplayTreeMap.new({:a => 1, :b => 2, :c => 3})\nstm.transform_values { |value| value + 1 } # => {:a => 2, :b => 3, :c => 4}\n```","summary":"<p>Returns a new SplayTreeMap with all values converted using the block operation.</p>","abstract":false,"location":{"filename":"src/splay_tree_map.cr","line_number":1192,"url":null},"def":{"name":"transform_values","yields":1,"block_arity":1,"block_arg":{"name":"","external_name":"","restriction":"(V -> V2)"},"visibility":"Public","body":"each_with_object(SplayTreeMap(K, V2).new) do |__arg9, memo|\n  key = __arg9[0]\n  value = __arg9[1]\n  memo[key] = yield(value)\nend"}},{"html_id":"transform_values!(&:V->V)-instance-method","name":"transform_values!","doc":"Modifies the values of the current `SplayTreeMap` according to the provided block.\n\n```\nstm = SplayTreeMap.new({:a => 1, :b => 2, :c => 3})\nstm.transform_values! { |value| value + 1 } # => {:a => 2, :b => 3, :c => 4}\n```","summary":"<p>Modifies the values of the current <code><a href=\"SplayTreeMap.html\">SplayTreeMap</a></code> according to the provided block.</p>","abstract":false,"location":{"filename":"src/splay_tree_map.cr","line_number":1204,"url":null},"def":{"name":"transform_values!","yields":1,"block_arity":1,"block_arg":{"name":"","external_name":"","restriction":"(V -> V)"},"visibility":"Public","body":"each do |key, value|\n  memo[key] = yield(value)\nend\nself\n"}},{"html_id":"values:Array(V)-instance-method","name":"values","doc":"Returns an array containing all of the values in the tree. The array is in\nthe order of the associated keys.\n\n```\nstm = SplayTreeMap.new({\"a\" => 1, \"b\" => 2, \"c\" => 3, \"d\" => 4})\nstm.values # => [1, 2, 3, 4]\n```\n","summary":"<p>Returns an array containing all of the values in the tree.</p>","abstract":false,"location":{"filename":"src/splay_tree_map.cr","line_number":1219,"url":null},"def":{"name":"values","return_type":"Array(V)","visibility":"Public","body":"a = [] of V\neach do |_k, v|\n  a << v\nend\na\n"}},{"html_id":"values_at(*indexes:K)-instance-method","name":"values_at","doc":"Returns a tuple populated with the values associated with the given *keys*.\nRaises a KeyError if any key is invalid.\n\n```\nstm = SplayTreeMap.new({\"a\" => 1, \"b\" => 2, \"c\" => 3, \"d\" => 4})\nstm.values_at(\"a\", \"c\")      # => {1, 3}\nstm.values_at(\"a\", \"d\", \"e\") # => KeyError\n```","summary":"<p>Returns a tuple populated with the values associated with the given <em>keys</em>.</p>","abstract":false,"args":[{"name":"indexes","external_name":"indexes","restriction":"K"}],"args_string":"(*indexes : K)","args_html":"(*indexes : K)","location":{"filename":"src/splay_tree_map.cr","line_number":1233,"url":null},"def":{"name":"values_at","args":[{"name":"indexes","external_name":"indexes","restriction":"K"}],"splat_index":0,"visibility":"Public","body":"indexes.map do |index|\n  self[index]\nend"}},{"html_id":"values_at?(*indexes:K)-instance-method","name":"values_at?","doc":"Returns a tuple populated with the values associated with the given *keys*.\nReturns `nil` for any key that is invalid.\n\n```\nstm = SplayTreeMap.new({\"a\" => 1, \"b\" => 2, \"c\" => 3, \"d\" => 4})\nstm.values_at?(\"a\", \"c\")      # => {1, 3}\nstm.values_at?(\"a\", \"d\", \"e\") # => {1, 4, nil}\n```","summary":"<p>Returns a tuple populated with the values associated with the given <em>keys</em>.</p>","abstract":false,"args":[{"name":"indexes","external_name":"indexes","restriction":"K"}],"args_string":"(*indexes : K)","args_html":"(*indexes : K)","location":{"filename":"src/splay_tree_map.cr","line_number":1245,"url":null},"def":{"name":"values_at?","args":[{"name":"indexes","external_name":"indexes","restriction":"K"}],"splat_index":0,"visibility":"Public","body":"indexes.map do |index|\n  self[index]?\nend"}},{"html_id":"was_pruned?:Bool-instance-method","name":"was_pruned?","abstract":false,"location":{"filename":"src/splay_tree_map.cr","line_number":65,"url":null},"def":{"name":"was_pruned?","return_type":"Bool","visibility":"Public","body":"@was_pruned"}}]}]}})